---
# Deploys the current branch sets up gunicorn etc
# deletes existing cron jobs, copies in our cron jobs
# set up the project itself
- name: Deploy our branch
  git: repo={{ GIT_REPO }}
       version={{ GIT_BRANCH }}
       dest={{ PROJECT_DIR }}/
       accept_hostkey=yes
       force=yes

# - name: Ensure github.com is a known host
#   lineinfile:
#     dest: /home/ohc/.ssh/known_hosts
#     create: yes
#     state: present
#     line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
#     regexp: "^github\\.com"

- name: Create configs
  template:
    src: "templates/{{ item }}.jinja2"
    dest: "{{ PROJECT_DIR }}/etc/{{ item }}"
    mode: 0744
    owner: ohc
  with_items:
    - gunicorn.conf
    - gunicorn_conf.py
    - nginx_site.conf

- name: Create local settings
  template:
    src: "templates/local_settings.py.jinja2"
    dest: "{{ PROJECT_DIR }}/local_settings.py"
    mode: 0744
    owner: ohc

- name: Ensure no existing virtualenv exists
  file:
    state: absent
    path: "{{ VIRTUALENV_PATH }}/"

- name: Create the virtualenv
  become: yes
  become_user: ohc
  shell: . /usr/share/virtualenvwrapper/virtualenvwrapper.sh && mkvirtualenv -p /usr/bin/python3 {{ ENV_NAME }}
  args:
    executable: /bin/bash

- name: Set the virtualenv project
  template:
    src: templates/project.jinja2
    dest: "{{ VIRTUALENV_PATH }}/.project"
    mode: 0744
    owner: ohc

- name: Install packages required by the Django app inside virtualenv
  pip:
    virtualenv: "{{ VIRTUALENV_PATH }}"
    requirements: "{{ PROJECT_DIR }}/requirements.txt"

- name: Create local settings
  template:
    src: "templates/local_settings.py.jinja2"
    dest: "{{ PROJECT_DIR }}/local_settings.py"
    mode: 0744
    owner: "{{ UNIX_USER }}"

- name: create a database
  become: true
  become_user: postgres
  postgresql_db:
    name={{ DB_NAME }}
    encoding='UTF-8'
    owner={{ DB_USER }}
    template=template0

- name: Run Django database migrations
  args:
    chdir: "{{ PROJECT_DIR}}"
  command: "{{ VIRTUALENV_PATH }}/bin/python manage.py migrate"

- name: Run Django collectstatic
  args:
    chdir: "{{ PROJECT_DIR}}"
  command: "{{ VIRTUALENV_PATH }}/bin/python manage.py collectstatic --noinput"

- name: Create singletons
  args:
    chdir: "{{ PROJECT_DIR}}"
  command: "{{ VIRTUALENV_PATH }}/bin/python manage.py create_singletons"

- name: Load lookuplists
  args:
    chdir: "{{ PROJECT_DIR}}"
  command: "{{ VIRTUALENV_PATH }}/bin/python manage.py load_lookup_lists"
